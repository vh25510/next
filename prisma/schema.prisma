generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Member {
  id         Int    @id @default(autoincrement())
  name       String
  log        Log[]  @relation("log")
  log_author Log[]  @relation("log_author")
  User       User?
}

model Task {
  id  String @id
  log Log[]
}

model Log {
  id       String   @id @default(cuid())
  level    Int
  date     DateTime
  session  Int
  period   Int
  authorId Int
  author   Member   @relation("log_author", references: [id], fields: [authorId])
  memberId Int
  taskId   String
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  task     Task     @relation(fields: [taskId], references: [id])
  member   Member   @relation("log", fields: [memberId], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String    @id @default(cuid())
  member         Member    @relation(fields: [memberId], references: [id])
  username       String    @unique
  role           String
  hashedPassword String
  accounts       Account[]
  sessions       Session[]
  memberId       Int       @unique
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
